package pttask;

import java.util.concurrent.PriorityBlockingQueue;
import java.util.PriorityQueue;
import org.moeaframework.problem.tsplib.DistanceTable;
import tsp.State1;
import pt.runtime.*;
import tsp.MainRunner;
import java.util.AbstractQueue;
import tsp.AbstractSolver;
import util.Problem;
import util.StateCompare;
import heuristic.Heuristic;
import java.util.concurrent.CountDownLatch;

public class AStarBlackboardSolver extends AbstractSolver {
	private static final double TOLERANCE = 10.0;
	private State1 finalState;
	//countdown latch with total number of threads
	private CountDownLatch latch;
	
	public AStarBlackboardSolver(Heuristic heuristic, DistanceTable table) {
		super(heuristic, table);
		//countdown latch with total number of threads
		latch = new CountDownLatch (Runtime.getRuntime().availableProcessors());
	}
	
	public State1 search() {	
		//create shared blackboard
		PriorityBlockingQueue<State1> blackboard = new PriorityBlockingQueue<State1>(1, new StateCompare());
		blackboard.add(new State1(initialAndGoal, table.listNodes().length)); //initialise current state
		expand(blackboard, null, false);

		//create a multi task with data parallelism
		TaskIDGroup task = loop(blackboard);
		try {
			task.waitTillFinished();
		} catch (Exception e) { e.printStackTrace(); }
		return finalState;
	}
	
	/**
	 * This keeps calling expanding nodes until we find the solution
	 */
	TASK(*) public void loop(PriorityBlockingQueue<State1> blackboard) {
		PriorityQueue<State1> frontier = new PriorityQueue<State1>(1, new StateCompare());
		try {
			frontier.add(blackboard.poll()); //initialise current state
		} catch (NullPointerException e) {} //more processors than cities
		int iteration = 0;
		boolean localFlag = false; //this deals with the parallel termination condition, along with countdownlatch
		//expand minimum state each iteration
		while (latch.getCount() != 0) {
			iteration++;
			localFlag = expand(frontier, blackboard, localFlag);
		}
	}
	
	/**
	 * This method expands a single node at the front of the priority queue
	 * return: true if thread should still be searching, otherwise false
	 */
	public boolean expand(AbstractQueue<State1> frontier, PriorityBlockingQueue<State1> blackboard, boolean localFlag) {
		State1 currentState;
		//finding the best f value in the open list and set it as current.
		currentState = frontier.poll();
		if (currentState == null) {
			if (finalState != null && blackboard.isEmpty()) {
				latch.countDown();//no more states to process
				localFlag = true;
			}
			return localFlag;
		}
		//check tolerance
		if (blackboard != null) {
			State1 blackboardBest = blackboard.peek();
			if ((blackboard !=null && blackboardBest != null) && 
					(finalState != null //remove threshold solution has already been found
						|| currentState.getFValue() > blackboardBest.getFValue() + TOLERANCE)) {
				//take some states from blackboard (max 5) and try again
				for (int i = 0; i < 5; i++) {
					State1 transferState = blackboard.poll();
					if (transferState != null) {
						frontier.add(transferState);
					}
				}
			} else if (finalState == null //don't add more to blackboard after a solution is found
					&& blackboardBest != null  && currentState != null && currentState.getFValue() < blackboardBest.getFValue() - TOLERANCE) {
				//put some of our best states onto blackboard (max 5) and continue
				for (int i = 0; i < 5 && i < frontier.size(); i++) {
					blackboard.add(frontier.poll());
				}
			}
		}
		//if solution has been found, don't expand until bb is clear
		if (finalState != null && !blackboard.isEmpty()) {
			return localFlag;
		}
		
		//check if we have found a possible solution
		if (currentState.getCities().size() == table.listNodes().length + 1) {
			if (finalState == null || currentState.getCurrentTourDistance() < finalState.getCurrentTourDistance()) {
				foundGoalState(currentState);
			}
		} else if (currentState.getCities().size() == table.listNodes().length) {
			//add the path back to the initial city
			double g = currentState.getCurrentTourDistance() + Problem.getDistanceBetween(table, currentState.getCurrentCity(), initialAndGoal);
			frontier.add(new State1(currentState, initialAndGoal, g,0));
		}
		//expand the node by adding all neighbours to queue
		for (int s : table.getNeighborsOf(currentState.getCurrentCity())) {
			if  (currentState.pathContains(s)) {
				continue;
			}
			//evaluate the g value of the state
			double g = currentState.getCurrentTourDistance() + Problem.getDistanceBetween(table, currentState.getCurrentCity(), s);

			//evaluate the h value of the state
			double h = heuristic.heuristicCost(s, table, currentState.getCities(), currentState);
			//store the f value in the map
			double fValue = g + h;
			frontier.add(new State1(currentState, s, g, fValue));
		}
		
		if (blackboard != null) {
			notifyObservers(currentState, CurrentTask.relativeID());
		}
		
		//set the local flag to true (finished) and count the latch down if our current state tour distance is greater than finalState tour distance
		if (finalState != null && !localFlag && currentState.getFValue() > finalState.getCurrentTourDistance()) {
			latch.countDown();
			localFlag = true;
		}
		return localFlag;
	}
	
	public void foundGoalState(State1 newFinalState) {
		finalState = newFinalState;
	}
}

